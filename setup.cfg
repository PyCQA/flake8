[bdist_wheel]
universal = 1

[metadata]
name = flake8
version = attr: flake8.__version__
license = MIT
license_file = LICENSE
description = the modular source code checker: pep8 pyflakes and co
long_description = file: README.rst
author = Tarek Ziade
author_email = tarek@ziade.org
maintainer = Ian Stapleton Cordasco
maintainer_email = graffatcolmingov@gmail.com
url = https://gitlab.com/pycqa/flake8
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Console
    Framework :: Flake8
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Topic :: Software Development :: Libraries :: Python Modules
    Topic :: Software Development :: Quality Assurance

[options]
package_dir=
    =src
packages = find:

install_requires=
# We document the reasoning for using ranges here:
# http://flake8.pycqa.org/en/latest/faq.html#why-does-flake8-use-ranges-for-its-dependencies
# And in which releases we will update those ranges here:
# http://flake8.pycqa.org/en/latest/internal/releases.html#releasing-flake8
    pyflakes >= 2.2.0, < 2.3.0
    pycodestyle >= 2.6.0a1, < 2.7.0
    mccabe >= 0.6.0, < 0.7.0
    enum34; python_version<"3.4"
    typing; python_version<"3.5"
    configparser; python_version<"3.2"
    functools32; python_version<"3.2"
    importlib-metadata; python_version<"3.8"

python_requires = >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*

[options.packages.find]
where = src

[options.entry_points]
distutils.commands=
    flake8 = flake8.main.setuptools_command:Flake8
console_scripts =
    flake8 = flake8.main.cli:main
flake8.extension =
    F = flake8.plugins.pyflakes:FlakesChecker
    pycodestyle.ambiguous_identifier = pycodestyle:ambiguous_identifier
    pycodestyle.bare_except = pycodestyle:bare_except
    pycodestyle.blank_lines = pycodestyle:blank_lines
    pycodestyle.break_after_binary_operator = pycodestyle:break_after_binary_operator
    pycodestyle.break_before_binary_operator = pycodestyle:break_before_binary_operator
    pycodestyle.comparison_negative = pycodestyle:comparison_negative
    pycodestyle.comparison_to_singleton = pycodestyle:comparison_to_singleton
    pycodestyle.comparison_type = pycodestyle:comparison_type
    pycodestyle.compound_statements = pycodestyle:compound_statements
    pycodestyle.continued_indentation = pycodestyle:continued_indentation
    pycodestyle.explicit_line_join = pycodestyle:explicit_line_join
    pycodestyle.extraneous_whitespace = pycodestyle:extraneous_whitespace
    pycodestyle.imports_on_separate_lines = pycodestyle:imports_on_separate_lines
    pycodestyle.indentation = pycodestyle:indentation
    pycodestyle.maximum_doc_length = pycodestyle:maximum_doc_length
    pycodestyle.maximum_line_length = pycodestyle:maximum_line_length
    pycodestyle.missing_whitespace = pycodestyle:missing_whitespace
    pycodestyle.missing_whitespace_after_import_keyword = pycodestyle:missing_whitespace_after_import_keyword
    pycodestyle.missing_whitespace_around_operator = pycodestyle:missing_whitespace_around_operator
    pycodestyle.module_imports_on_top_of_file = pycodestyle:module_imports_on_top_of_file
    pycodestyle.python_3000_async_await_keywords = pycodestyle:python_3000_async_await_keywords
    pycodestyle.python_3000_backticks = pycodestyle:python_3000_backticks
    pycodestyle.python_3000_has_key = pycodestyle:python_3000_has_key
    pycodestyle.python_3000_invalid_escape_sequence = pycodestyle:python_3000_invalid_escape_sequence
    pycodestyle.python_3000_not_equal = pycodestyle:python_3000_not_equal
    pycodestyle.python_3000_raise_comma = pycodestyle:python_3000_raise_comma
    pycodestyle.tabs_obsolete = pycodestyle:tabs_obsolete
    pycodestyle.tabs_or_spaces = pycodestyle:tabs_or_spaces
    pycodestyle.trailing_blank_lines = pycodestyle:trailing_blank_lines
    pycodestyle.trailing_whitespace = pycodestyle:trailing_whitespace
    pycodestyle.whitespace_around_comma = pycodestyle:whitespace_around_comma
    pycodestyle.whitespace_around_keywords = pycodestyle:whitespace_around_keywords
    pycodestyle.whitespace_around_named_parameter_equals = pycodestyle:whitespace_around_named_parameter_equals
    pycodestyle.whitespace_around_operator = pycodestyle:whitespace_around_operator
    pycodestyle.whitespace_before_comment = pycodestyle:whitespace_before_comment
    pycodestyle.whitespace_before_parameters = pycodestyle:whitespace_before_parameters
flake8.report =
    default = flake8.formatting.default:Default
    pylint = flake8.formatting.default:Pylint
    quiet-filename = flake8.formatting.default:FilenameOnly
    quiet-nothing = flake8.formatting.default:Nothing

[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
# TODO: disallow_untyped_defs = true
no_implicit_optional = true
warn_unused_ignores = true

# TODO: until we opt in all the modules
[mypy-flake8.defaults]
disallow_untyped_defs = true
[mypy-flake8.exceptions]
disallow_untyped_defs = true
[mypy-flake8.formatting.*]
disallow_untyped_defs = true
[mypy-flake8.options.manager]
disallow_untyped_defs = true
[mypy-flake8.main.cli]
disallow_untyped_defs = true
[mypy-flake8.processor]
disallow_untyped_defs = true
[mypy-flake8.statistics]
disallow_untyped_defs = true
[mypy-flake8.style_guide]
disallow_untyped_defs = true
[mypy-flake8.utils]
disallow_untyped_defs = true

[mypy-tests.*]
disallow_untyped_defs = false
